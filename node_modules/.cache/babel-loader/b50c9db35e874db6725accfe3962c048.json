{"ast":null,"code":"var _jsxFileName = \"/Users/lawrencecastillo/OneDrive - Hunter - CUNY/cuny2x/Homeworks/zip-search/src/components/zip.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport './zip.css';\nimport Definition from './definition'; // Zip should store all the results from the search\n\nclass Zip extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // this should store all the data fetched from the API\n      data: [{\n        Zipcode: \"10028\",\n        City: \"City\",\n        State: \"State\",\n        Lat: \"Lat\",\n        Long: \"Long\",\n        EstimatedPopulation: \"EstimatePopulation\",\n        TotalWages: \"TotalWages\"\n      }]\n    };\n  }\n\n  fetchZipData() {\n    console.log(this.state.data.Zipcode = \"10028\");\n    console.log(\"http://ctp-zip-api.herokuapp.com/zip/\" + this.state.data.Zipcode);\n    /*\n    axios.get(\"http://ctp-zip-api.herokuapp.com/zip/10028\")\n        .then(response => {\n            var wanted = [\"10028\"];\n            var result = response.data.filter(Zips => wanted.includes(Zips.Zipcode));\n            console.log(result);\n            this.setState({data: result});\n            \n        })\n        .catch(err => console.log(err));\n        */\n  }\n\n  render() {\n    let bool = true;\n\n    if (bool) {\n      this.fetchZipData();\n      bool = false;\n    } //console.log(this.state.data.map(zipcode));\n\n\n    var city = this.state.data.map(Zips => React.createElement(Definition, {\n      data: Zips,\n      key: Zips.Zipcode,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }));\n    return React.createElement(\"div\", {\n      className: \"zip-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      className: \"zips\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, city));\n  } // functions to bind\n  // 1) function pass into the button  to inititate everything\n  // 2) function to create element for each results and append to result container\n  // renderDefaultView to display nothing when there is no search\n  // renderSearchView to display something when there is a search\n  // optional - reset the search status to false when the user no longer wants to search anything \n\n\n}\n\nexport default Zip;","map":{"version":3,"sources":["/Users/lawrencecastillo/OneDrive - Hunter - CUNY/cuny2x/Homeworks/zip-search/src/components/zip.js"],"names":["React","Component","axios","Definition","Zip","constructor","props","state","data","Zipcode","City","State","Lat","Long","EstimatedPopulation","TotalWages","fetchZipData","console","log","render","bool","city","map","Zips"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,OAAOC,UAAP,MAAuB,cAAvB,C,CAEA;;AACA,MAAMC,GAAN,SAAkBH,SAAlB,CAA4B;AAExBI,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACT;AACAC,MAAAA,IAAI,EAAE,CACF;AACIC,QAAAA,OAAO,EAAE,OADb;AAEIC,QAAAA,IAAI,EAAE,MAFV;AAGIC,QAAAA,KAAK,EAAE,OAHX;AAIIC,QAAAA,GAAG,EAAE,KAJT;AAKIC,QAAAA,IAAI,EAAE,MALV;AAMIC,QAAAA,mBAAmB,EAAE,oBANzB;AAOIC,QAAAA,UAAU,EAAE;AAPhB,OADE;AAFG,KAAb;AAcH;;AAEDC,EAAAA,YAAY,GAAE;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKX,KAAL,CAAWC,IAAX,CAAgBC,OAAhB,GAA0B,OAAtC;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAY,0CAA0C,KAAKX,KAAL,CAAWC,IAAX,CAAgBC,OAAtE;AACA;;;;;;;;;;;AAWH;;AACDU,EAAAA,MAAM,GAAE;AACJ,QAAIC,IAAI,GAAG,IAAX;;AACA,QAAIA,IAAJ,EAAS;AACL,WAAKJ,YAAL;AACAI,MAAAA,IAAI,GAAG,KAAP;AACH,KALG,CAMJ;;;AACA,QAAIC,IAAI,GAAG,KAAKd,KAAL,CAAWC,IAAX,CAAgBc,GAAhB,CAAqBC,IAAD,IAC3B,oBAAC,UAAD;AAAY,MAAA,IAAI,EAAEA,IAAlB;AAAwB,MAAA,GAAG,EAAEA,IAAI,CAACd,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADO,CAAX;AAGA,WACI;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAI,MAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAsBY,IAAtB,CADJ,CADJ;AAKH,GAlDuB,CAmDpB;AACI;AACA;AACA;AACA;AACA;;;AAxDgB;;AA2D5B,eAAejB,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport './zip.css';\nimport Definition from './definition';\n\n// Zip should store all the results from the search\nclass Zip extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            // this should store all the data fetched from the API\n            data: [\n                {\n                    Zipcode: \"10028\",\n                    City: \"City\",\n                    State: \"State\",\n                    Lat: \"Lat\",\n                    Long: \"Long\",\n                    EstimatedPopulation: \"EstimatePopulation\",\n                    TotalWages: \"TotalWages\",\n                }\n            ]\n        };\n    }\n\n    fetchZipData(){\n        console.log(this.state.data.Zipcode = \"10028\");\n        console.log(\"http://ctp-zip-api.herokuapp.com/zip/\" + this.state.data.Zipcode );\n        /*\n        axios.get(\"http://ctp-zip-api.herokuapp.com/zip/10028\")\n            .then(response => {\n                var wanted = [\"10028\"];\n                var result = response.data.filter(Zips => wanted.includes(Zips.Zipcode));\n                console.log(result);\n                this.setState({data: result});\n                \n            })\n            .catch(err => console.log(err));\n            */\n    }\n    render(){\n        let bool = true;\n        if (bool){\n            this.fetchZipData();\n            bool = false;\n        }\n        //console.log(this.state.data.map(zipcode));\n        var city = this.state.data.map((Zips) =>\n            <Definition data={Zips} key={Zips.Zipcode} />\n        );\n        return(\n            <div className=\"zip-container\">\n                <ul className=\"zips\">{city}</ul>\n            </div>\n        );\n    }\n        // functions to bind\n            // 1) function pass into the button  to inititate everything\n            // 2) function to create element for each results and append to result container\n            // renderDefaultView to display nothing when there is no search\n            // renderSearchView to display something when there is a search\n            // optional - reset the search status to false when the user no longer wants to search anything \n}\n\nexport default Zip;"]},"metadata":{},"sourceType":"module"}